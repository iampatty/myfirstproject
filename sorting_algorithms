#ifndef SORTING_HPP
#define SORTING_HPP
#include <iostream>
#include "seqLinearList.hpp"

using namespace std;

template<class Item>
class Sort{
    private:

    public:
        //INSERTION SORT
        void insertionSort(LinearList<Item>& A, int low, int high)
        {
            int i,key,j;
            for(int i=1;i<=high;++i)
            {
                 key=A[i];         //Insert A[j] into sorted sequence A[j-1]..
                 j=i-1;
                while(j>=0 && A[j]>key)
                {
                    A[j+1]=A[j];
                    j--;
                }
                A[j+1]=key;
            }

        }




        void Merge(LinearList<Item>& A,int p,int q,int r)
         {
             int i=p;//low=p
            int j=q+1;//mid=q
            int k=p;//k=low
            int temp[r-p+1];


            while(i<=q && j<=r)
            {
                if(A[i]<A[j])
                    {
                        temp[k++]=A[i++];
                    }
                else{
                    temp[k++]=A[j++];
                    }
            }
            while(i<=q)
                {
                temp[k++]=A[i++];
                }
            while(j<r)
                {
                temp[k++]=A[j++];
                }
            for(i=p;i<k;i++)
            {
                A[i]=temp[i];
            }

        };


        void MergeSort(LinearList<Item>& A, int low, int high)
        {
            if(low<high)
            {
                int mid=(low+high)/2;
                    MergeSort(A,low,mid);
                   MergeSort(A,mid+1,high);

                   Merge(A,low,mid,high);
             }
        return;
       }

            void swap(int *x,int *y)
           {
               int temp=*x;
               *x=*y;
               *y=temp;
           }

           int partition(LinearList<Item>& A, int low, int high)
           {
               int pivot=A[high];
               int i=low-1;  //index set to -1
               for(int j=low;j<high;j++)
               {
                   if(A[j]<pivot)
                   {
                       i++;
                       swap(&A[i],&A[j]);
                   }
               }
               swap(&A[i+1],&A[high]);
               return(i+1);

        }

        void quickSort(LinearList<Item>& A, int low, int high)
        {
            if(low < high)
            {
                int p=partition(A,low,high);
                quickSort(A,low,p-1);
                quickSort(A,p+1,high);
            }
        }



        void heapify(LinearList<Item>& A, int n, int i)
        {
            int root=i;
            int leftchild=2*i+1;
            int rightchild=2*i+2;

            if(leftchild < n && A[leftchild] > A[root])
                root=leftchild;
            if(rightchild < n && A[rightchild] > A[root])
                root=rightchild;
            if(root!=i)
            {
                swap(&A[i],&A[root]);
                heapify(A,n,root);
            }
        }

        void heapSort(LinearList<Item>& A, int low, int high)
        {

            for(int i=high/2-1;i>=low;i--)
                heapify(A,high,i);
            for(int i=high-1;i>=low;i--)
            {
                swap(&A[low],&A[i]);
                heapify(A,i,low);
            }
        }
};
/*
int main()
{
    Sort<int> S;
    LinearList<int> list(50);
    int n;
    cout<<"Enter the number of elements in your List";
    cin>>n;
    cout<<"Enter the elements"<<endl;
    for(int i=0;i<n;i++)
    {
        cin>>list[i];
    }
    int list_size=list.length();
    cout<<list_size<<endl;



   //S.MergeSort(list,0,n-1);
   //S.quickSort(list,0,n-1);
   //S.insertionSort(list,0,n-1);
   //S.heapSort(list,0,n);

   for(int i=0;i<n;++i)
        cout<<list[i]<<" ";



return(0);
}
*/
#endif
